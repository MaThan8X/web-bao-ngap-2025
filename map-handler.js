// map-handler.js (Ver 13 - Fix l·ªói Modal C·∫•u h√¨nh kh√¥ng hi·ªÉn th·ªã & T·ªëi ∆∞u Marker)
// - S·ª≠a l·ªói: ƒê·∫£m b·∫£o Modal C·∫•u h√¨nh ƒë∆∞·ª£c hi·ªÉn th·ªã (display='block') khi g·ªçi openConfigModal(null) (kh·∫Øc ph·ª•c l·ªói n√∫t "Th√™m Khu V·ª±c M·ªõi").
// - B·ªï sung: Th√™m window.closeConfigModal ƒë·ªÉ n√∫t H·ªßy trong Modal ho·∫°t ƒë·ªông.
// - C·∫£i ti·∫øn: Th√™m x·ª≠ l√Ω ƒë·ªÉ b·ªè qua c√°c tr·∫°m thi·∫øu t·ªça ƒë·ªô khi render Marker (kh·∫Øc ph·ª•c l·ªói m·∫•t ƒêi·ªÉm tr√≤n ƒë·ªông n·∫øu d·ªØ li·ªáu sai).

(function() {
    const API_BASE_URL = window.location.origin; 
    const DEFAULT_CENTER = [20.2647, 105.9754]; // TP Ninh B√¨nh
    const DEFAULT_ZOOM = 12;

    let map;
    let markersLayer = L.layerGroup(); 
    let allStations = []; 
    let editingStationId = null; 

    // Khai b√°o c√°c bi·∫øn DOM ·ªü ph·∫°m vi ngo√†i ƒë·ªÉ ti·ªán truy c·∫≠p
    let configModal, configForm, btnCancel, btnAddStation, btnDelete; 

    // --- UTILITY FUNCTIONS ---
    
    function getStatus(mucnuoc) {
        if (mucnuoc === null || isNaN(mucnuoc)) return 'nodata';
        if (mucnuoc >= 40) return 'danger';    
        if (mucnuoc >= 20) return 'warn';      
        return 'safe';                         
    }
    
    function getTrend() { return '·ªîn ƒë·ªãnh'; }

    function createPopupContent(station) {
        const status = getStatus(station.mucnuoc);
        const statusText = {
            'nodata': 'Ch∆∞a c√≥ d·ªØ li·ªáu',
            'safe': 'An to√†n',
            'warn': 'Nguy c∆°',
            'danger': 'Nguy hi·ªÉm'
        }[status];

        const trendText = getTrend(station); 

        // ƒê·ªãnh d·∫°ng l·∫°i t√™n tr·∫°m n·∫øu b·ªã thi·∫øu
        const stationName = station.name && station.name.trim() !== '' ? station.name : `Tr·∫°m ${station.id}`;
        
        // D√πng window.openConfigModal v√¨ n√≥ ƒë∆∞·ª£c khai b√°o global (trong IIFE n√†y)
        return `
            <div class="popup-content">
                <h3 class="${status}">${stationName} (${station.id})</h3>
                <p><strong>M·ª©c n∆∞·ªõc:</strong> ${station.mucnuoc} cm</p>
                <p><strong>ƒêi·ªán √°p:</strong> ${station.vol} V</p>
                <p><strong>Tr·∫°ng th√°i:</strong> <span class="status-label ${status}">${statusText}</span></p>
                <p><strong>C·∫≠p nh·∫≠t cu·ªëi:</strong> ${station.last_update ? station.last_update : 'N/A'}</p>
                <p><strong>Xu h∆∞·ªõng:</strong> ${trendText}</p>
                <button onclick="window.openConfigModal('${station.id}')" class="btn-config">C·∫•u h√¨nh</button>
            </div>
        `;
    }

    function createStationItem(station) {
        const status = getStatus(station.mucnuoc);
        const stationName = station.name && station.name.trim() !== '' ? station.name : `Tr·∫°m ${station.id} (Ch∆∞a c·∫•u h√¨nh)`;

        const li = document.createElement('li');
        li.classList.add('station-item', status);
        li.dataset.id = station.id;
        li.dataset.status = status; 
        li.innerHTML = `
            <div class="station-info">
                <span class="status-indicator ${status}"></span>
                <span class="station-name">${stationName}</span>
                <span class="station-id">ID: ${station.id}</span>
            </div>
            <div class="station-actions">
                <button class="btn-zoom" title="Ph√≥ng to" onclick="window.zoomToStation('${station.id}')">üîç</button>
                <button class="btn-edit" title="Ch·ªânh s·ª≠a" onclick="window.openConfigModal('${station.id}')">‚öôÔ∏è</button>
            </div>
        `;
        return li;
    }

    // --- HANDLERS V√Ä MODAL ---

    function renderSidebar(stations) {
        const list = document.getElementById('station-list');
        if (!list) return console.error("L·ªñI DOM: Kh√¥ng t√¨m th·∫•y ul#station-list");
        
        // S·∫Øp x·∫øp theo ID (tƒÉng d·∫ßn)
        stations.sort((a, b) => a.id.localeCompare(b.id));

        list.innerHTML = '';
        stations.forEach(station => {
            list.appendChild(createStationItem(station));
        });
    }

    // D√πng cho n√∫t Zoom tr√™n Sidebar
    window.zoomToStation = function(id) {
        const station = allStations.find(s => s.id === id);
        if (station && map) {
            map.setView([station.lat, station.lon], 16); // Zoom ƒë·∫øn c·∫•p ƒë·ªô 16
        }
    };
    
    // ƒê√≥ng Modal C·∫•u h√¨nh
    function closeConfigModal() {
        if (configModal) {
            configModal.style.display = 'none';
        }
        editingStationId = null;
    }
    
    // N√∫t H·ªßy trong Modal c≈©ng g·ªçi h√†m n√†y (ƒê√£ b·ªï sung v√†o window)
    window.closeConfigModal = closeConfigModal;

    // M·ªü Modal C·∫•u h√¨nh (ƒë∆∞·ª£c g·ªçi t·ª´ Sidebar/Popup/N√∫t Th√™m m·ªõi)
    window.openConfigModal = function(id = null) {
        editingStationId = id;
        
        // Reset Form
        configForm.reset();
        document.getElementById('config-id').readOnly = false;
        
        // L·∫•y l·∫°i n√∫t delete (c·∫ßn ƒë·∫£m b·∫£o n√≥ ƒë∆∞·ª£c g√°n DOM ·ªü initMap)
        if(btnDelete) btnDelete.style.display = 'none'; 
        
        // N√∫t Th√™m Khu V·ª±c M·ªõi (id = null)
        if (id === null) {
            configModal.querySelector('h2').textContent = 'Th√™m Khu V·ª±c Gi√°m S√°t M·ªõi';
        } else {
            // N√∫t Ch·ªânh s·ª≠a (id != null)
            const station = allStations.find(s => s.id === id);
            if (!station) {
                console.error(`Kh√¥ng t√¨m th·∫•y tr·∫°m c√≥ ID: ${id}`);
                return;
            }
            
            configModal.querySelector('h2').textContent = `C·∫•u h√¨nh Tr·∫°m: ${id}`;
            document.getElementById('config-id').value = station.id || '';
            document.getElementById('config-name').value = station.name || '';
            
            // X·ª≠ l√Ω t·ªça ƒë·ªô: N·∫øu lat/lon c√≥ s·∫µn, hi·ªÉn th·ªã n√≥
            let latLonValue = '';
            if (station.lat && station.lon) {
                 latLonValue = `${station.lat}, ${station.lon}`;
            } else if (station.lat) {
                 latLonValue = `${station.lat}, `; // Ch·ªâ c√≥ Lat
            } else if (station.lon) {
                 latLonValue = ` , ${station.lon}`; // Ch·ªâ c√≥ Lon
            }
            document.getElementById('config-lat-lon').value = latLonValue;
            
            // Kh√≥a ID l·∫°i khi ch·ªânh s·ª≠a
            document.getElementById('config-id').readOnly = true; 
            if(btnDelete) btnDelete.style.display = 'block';
        }
        
        // Fix l·ªói: ƒê·∫£m b·∫£o Modal ƒë∆∞·ª£c set display: block (n·∫øu DOM t·ªìn t·∫°i)
        if (configModal) {
            configModal.style.display = 'block';
        } else {
            console.error("L·ªñI KH√îNG T√åM TH·∫§Y: configModal");
        }
    }

    // X·ª≠ l√Ω G·ª≠i Form C·∫•u h√¨nh
    async function handleFormSubmit(event) {
        event.preventDefault();
        
        const id   = document.getElementById('config-id').value.trim();
        const name = document.getElementById('config-name').value.trim();
        const latLon = document.getElementById('config-lat-lon').value.trim().split(',').map(s => s.trim());
        
        if (latLon.length !== 2) {
            alert('L·ªói: T·ªça ƒë·ªô ph·∫£i nh·∫≠p d∆∞·ªõi d·∫°ng "vƒ© ƒë·ªô, kinh ƒë·ªô".');
            return;
        }

        const lat = parseFloat(latLon[0]);
        const lon = parseFloat(latLon[1]);

        if (isNaN(lat) || isNaN(lon)) {
             alert('L·ªói: Vƒ© ƒë·ªô ho·∫∑c Kinh ƒë·ªô kh√¥ng h·ª£p l·ªá.');
             return;
        }
        
        const apiUrl = `${API_BASE_URL}/save-config.php?id=${encodeURIComponent(id)}&name=${encodeURIComponent(name)}&lat=${lat}&lon=${lon}`;
        
        // Th√™m loading indicator
        const btnSave = document.getElementById('btn-save');
        btnSave.textContent = 'ƒêang l∆∞u...';
        btnSave.disabled = true;

        try {
            const response = await fetch(apiUrl);
            const data = await response.json();
            
            if (data.status === 'success') {
                alert('C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng.');
                closeConfigModal();
                fetchDataAndRender(); // T·∫£i l·∫°i d·ªØ li·ªáu sau khi l∆∞u
            } else {
                alert(`L·ªói khi l∆∞u c·∫•u h√¨nh: ${data.message || 'Kh√¥ng r√µ'}`);
            }
        } catch (error) {
            console.error('L·ªói Fetch API save-config:', error);
            alert(`L·ªói k·∫øt n·ªëi ho·∫∑c server: ${error.message}`);
        } finally {
            btnSave.textContent = 'L∆∞u Thay ƒê·ªïi';
            btnSave.disabled = false;
        }
    }

    // X·ª≠ l√Ω X√≥a Tr·∫°m
    window.handleDeleteStation = async function() {
        const idToDelete = editingStationId;

        if (!idToDelete || !confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën X√ìA tr·∫°m ${idToDelete} kh√¥ng? (Thao t√°c n√†y ch·ªâ x√≥a c·∫•u h√¨nh tr·∫°m, d·ªØ li·ªáu g·ª≠i t·ª´ module SIM v·∫´n c√≥ th·ªÉ t·∫°o l·∫°i tr·∫°m.)`)) {
            return;
        }

        // Action 'delete' ƒë∆∞·ª£c x·ª≠ l√Ω trong save-config.php (Ver 03)
        // L∆∞u √Ω: G·ª≠i action delete ƒë·ªÉ server x·ª≠ l√Ω
        const apiUrl = `${API_BASE_URL}/save-config.php?id=${encodeURIComponent(idToDelete)}&action=delete`; 
        
        // Th√™m loading indicator
        btnDelete.textContent = 'ƒêang x√≥a...';
        btnDelete.disabled = true;

        try {
            const response = await fetch(apiUrl);
            const data = await response.json();
            
            if (data.status === 'success') {
                alert(`Tr·∫°m ${idToDelete} ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.`);
                closeConfigModal();
                fetchDataAndRender(); // T·∫£i l·∫°i d·ªØ li·ªáu sau khi x√≥a
            } else {
                alert(`L·ªói khi x√≥a tr·∫°m: ${data.message || 'Kh√¥ng r√µ'}`);
            }
        } catch (error) {
            console.error('L·ªói Fetch API delete-config:', error);
            alert(`L·ªói k·∫øt n·ªëi ho·∫∑c server: ${error.message}`);
        } finally {
            btnDelete.textContent = 'X√≥a';
            btnDelete.disabled = false;
        }
    }


    // --- MAP FUNCTIONS ---

    // X·ª≠ l√Ω Render Markers l√™n b·∫£n ƒë·ªì
    function renderMarkers(stations) {
        markersLayer.clearLayers(); // X√≥a c√°c marker c≈©
        
        stations.forEach(station => {
            // B·ªè qua c√°c tr·∫°m kh√¥ng c√≥ t·ªça ƒë·ªô h·ª£p l·ªá (Kh·∫Øc ph·ª•c l·ªói m·∫•t ƒêi·ªÉm tr√≤n ƒë·ªông)
            if (!station.lat || !station.lon || isNaN(station.lat) || isNaN(station.lon)) {
                console.warn(`B·ªè qua tr·∫°m ${station.id} v√¨ thi·∫øu ho·∫∑c sai t·ªça ƒë·ªô.`);
                return;
            }

            const status = getStatus(station.mucnuoc);
            
            // ƒê·ªãnh nghƒ©a icon (CSS ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng ƒë·ªông)
            const customIcon = L.divIcon({
                className: 'custom-marker',
                html: `<div class="marker-pin ${status}"></div><div class="marker-label">${station.id}</div>`,
                iconSize: [30, 42], 
                iconAnchor: [15, 42], 
                popupAnchor: [0, -40] 
            });

            // T·∫°o marker
            const marker = L.marker([station.lat, station.lon], { icon: customIcon })
                .addTo(markersLayer)
                .bindPopup(createPopupContent(station));
            
            // X·ª≠ l√Ω s·ª± ki·ªán click tr√™n Sidebar ƒë·ªÉ m·ªü Popup c·ªßa Marker
            const listItem = document.querySelector(`.station-item[data-id="${station.id}"]`);
            if (listItem) {
                listItem.addEventListener('click', (e) => {
                    // NgƒÉn ch·∫∑n s·ª± ki·ªán click lan truy·ªÅn t·ª´ c√°c n√∫t b√™n trong (Zoom/Edit)
                    if (e.target.closest('.station-actions')) return; 
                    marker.openPopup();
                    map.setView([station.lat, station.lon], 16); // ƒê·ªìng th·ªùi zoom v√†o
                });
            }
        });
        
        markersLayer.addTo(map);
    }

    // --- FETCH DATA ---

    async function fetchDataAndRender() {
        try {
            const response = await fetch(`${API_BASE_URL}/get-locations.php`);
            
            if (!response.ok) {
                 throw new Error(`L·ªói HTTP: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!Array.isArray(data)) {
                throw new Error("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c kh√¥ng ph·∫£i l√† m·ªôt m·∫£ng.");
            }
            
            allStations = data;
            
            // 1. Render Sidebar (Giao di·ªán ƒë√£ ƒë∆∞·ª£c l√†m ƒë·∫πp trong styles.css Ver 05)
            renderSidebar(allStations);
            
            // 2. Render Markers (Hi·ªáu ·ª©ng ƒëi·ªÉm tr√≤n ƒë·ªông ƒë√£ ƒë∆∞·ª£c th√™m trong styles.css Ver 05)
            renderMarkers(allStations);
            
            console.log(`ƒê√£ t·∫£i v√† render th√†nh c√¥ng ${allStations.length} tr·∫°m.`);
            
        } catch (error) {
            console.error("L·ªñI KHI T·∫¢I D·ªÆ LI·ªÜU:", error);
            // C√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói l√™n giao di·ªán
        }
    }

    // --- KH·ªûI T·∫†O ---
    
    function initMap() {
        
        // 1. T√åM KI·∫æM V√Ä G√ÅN DOM 
        configModal = document.getElementById('config-modal');
        configForm = document.getElementById('config-form');
        btnCancel = document.getElementById('btn-cancel');
        btnAddStation = document.getElementById('add-station-btn');
        btnDelete = document.getElementById('btn-delete'); 
        
        // --- B·∫Øt ƒë·∫ßu Kh·ªüi t·∫°o Map ---
        if (!document.getElementById('map') || !L) {
            console.error("L·ªñI KH·ªûI T·∫†O MAP: Kh√¥ng t√¨m th·∫•y div id='map' ho·∫∑c th∆∞ vi·ªán Leaflet.");
            return;
        }

        map = L.map('map').setView(DEFAULT_CENTER, DEFAULT_ZOOM);

        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '¬© OpenStreetMap contributors'
        }).addTo(map);

        // --- G√ÅN S·ª∞ KI·ªÜN ---
        if (configForm && btnAddStation && btnCancel && btnDelete) {
            
            // S·ª∞ KI·ªÜN CHO N√öT H·ª¶Y (Trong Modal)
            btnCancel.addEventListener('click', closeConfigModal);
            
            // S·ª∞ KI·ªÜN N√öT TH√äM KHU V·ª∞C M·ªöI (Fix l·ªói)
            btnAddStation.addEventListener('click', () => {
                window.openConfigModal(null); // G·ªçi h√†m m·ªü modal ·ªü ch·∫ø ƒë·ªô th√™m m·ªõi
                document.getElementById('config-id').readOnly = false;
            });
            
            // S·ª∞ KI·ªÜN CHO N√öT X√ìA (Trong Modal)
            btnDelete.addEventListener('click', window.handleDeleteStation);

            // S·ª∞ KI·ªÜN G·ª¨I FORM
            configForm.addEventListener('submit', handleFormSubmit);
            
        } else {
             // Debug log chi ti·∫øt h∆°n ƒë·ªÉ ki·ªÉm tra DOM
             console.error("L·ªñI DOM: C√°c n√∫t t∆∞∆°ng t√°c (Modal/Sidebar) kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y.");
             console.log({ configForm, btnAddStation, btnCancel, btnDelete });
        }

        // --- L·∫§Y D·ªÆ LI·ªÜU L·∫¶N ƒê·∫¶U V√Ä T·ª∞ ƒê·ªòNG C·∫¨P NH·∫¨T ---
        fetchDataAndRender();
        // C·∫≠p nh·∫≠t sau m·ªói 60 gi√¢y
        setInterval(fetchDataAndRender, 60000); 
    }
    
    // Kh·ªüi t·∫°o Map v√† c√°c s·ª± ki·ªán khi DOM ƒë√£ load ho√†n to√†n
    window.onload = initMap;
})();
